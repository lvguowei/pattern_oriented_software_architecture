#+DATE: <2015-02-01 Sun>
#+TITLE: Monitor Object Pattern
#+AUTHOR: Guowei Lv
#+OPTIONS: texht:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LaTeX_HEADER: \usemintedstyle{emacs}
#+LATEX_HEADER_EXTRA:

* Introduction
The /Monitor Object/ design pattern synchronizes convurrent method execution to ensure that only one method at a time runs within an object. It also allows an object's methods to cooperatively schedule their execution sequences.
* Context
Multiple threads of control accessing the same object concurrently.
* Problem
Many applications contain objects whose methods are invoked concurrently by multiple client threads. These methods often modify the state of their objects. Fro such concurrent applications to execute correctly, therefore, it is necessary to synchronize and schedule access to the objects.
* Solution
Synchronize the access to an object's methods so that only one method can execute at any one time.
** In Detail
For each object accessed concurrently by multiple client threads, define it as a /monitor object/. Clients can access the functions defined by a monitor object only through its /synchronized methods/. To prevent race conditions on its internal state, only one synchronized method at a time can run within a monitor object. To serialize concurrent access to an object's state, each monitor object contains a /monitor lock/. Synchronized methods can determine the circumstances under which they suspend and resume their execution, based on one or more /monitor conditions/ associated with a monitor object.
* Implementation
** Define the monitor object's interface methods.
:PROPERTIES:
:noweb-ref: interface-methods
:END:

The interface of a monitor object exports a set of methods to clients. Interface methods are often /synchronized/, that is only one ot them at a time can be executed by a thread within a particular monitor object.

#+BEGIN_SRC java
// interface methods

/**
 ,* Put the message at the tail of the queue.
 ,* if the queue is full, block until the queue is not full.
 ,*
 ,* This method is synchronized.
 ,*/
public void put(Message message) throws InterruptedException {

  lock.lock();

  try {
    // wait while the queue is full.
    while (fullImpl()) {
      // release the lock and suspend the calling thread
      // waiting for space in the queue.
      // the lock is reacquired automatically when wait() returns.
      notFull.await();
    }

    putImpl(message);

    // notify not empty
    notEmpty.signal();
      
  } finally {
    lock.unlock();
  }
}


/**
 ,* Get the Message from the head of the queue.
 ,* If the queue is empty, wait until the queue is not empty.
 ,*
 ,* This method is synchronized.
 ,*/
public Message get() throws InterruptedException {

  lock.lock();

  try {
    while (emptyImpl()) {
      notEmpty.await();
    }

    Message message = getImpl();
    notFull.signal();
    return message;
      
  } finally {
    lock.unlock();
  }
    
}


/**
 ,* True if the queue is empty, else false.
 ,*
 ,* This method is synchronized.
 ,*/
public boolean empty() {

  lock.lock();
  try {
    return fullImpl();
  } finally {
    lock.unlock();
  }
}
  

/**
 ,* True if the queue is full, else false.
 ,*
 ,* This method is synchronized.
 ,*/
public boolean full() {
  lock.lock();
  try {
    return fullImpl();
  } finally {
    lock.unlock();
  }
}

#+END_SRC

The MessageQueue monitor object interface exports four synchronized methods. The =empty()= and =full()= methods are /predicates/ that clients can use to distinguish three internal queue states: empty, full and neither empty nor full. The =put()= and =get()= methods enqueue and dequeue messages into and from the queue, respectively, and will block if the queue is full or empty.

** Define the monitor object's implementation methods.
:PROPERTIES:
:noweb-ref: implementation-methods
:END:

A monitor object often contains internal implementation methods that synchronized interface methods use to perform the object's functionality. This design helps decouple the core monitor object functionality from its synchronization and scheduling logic. It also helps avoid intra-object deadlock and unnecessary locking overhead.

#+BEGIN_SRC java
// Implementation methods

/**
 ,* Get the Message at the head of the queue.
 ,*/
private Message getImpl() {
  Message message = messageQueue.remove(0);
  count--;
  return message;
}


/**
 ,* Put the message at the tail of the queue.
 ,*/
private void putImpl(Message message) {
  messageQueue.add(message);
  count++;
}

/**
 ,* True if the queue is empty, else false.
 ,*/
private boolean emptyImpl() {
  return count == 0;
}


/**
 ,* True if the queue is full, else false.
 ,*/
private boolean fullImpl() {
  return count == max_messages;
}
#+END_SRC

** Define the monitor object's internal state and synchronization mechanisms.
A monitor object contains data members that define its internal state. This state must be protected from corruption by race conditions resulting from synchronized concurrent access.

:PROPERTIES:
:noweb-ref: internal-state
:END:

#+BEGIN_SRC java
// internal state

/**
 ,* message limit
 ,*/
private int max_messages;

/**
 ,* Lock and conditions.
 ,*/
private ReentrantLock lock;
private Condition notFull;
private Condition notEmpty;


/**
 ,* The message queue.
 ,*/
private List<Message> messageQueue;

/**
 ,* The current number of Messages in the queue.
 ,*/
private int count;
#+END_SRC

A MessageQueue monitor object defines three types of internal state:
- Queue representation data members.
- Monitor lock data member.
- Monitor condition data members

** Implement all the monitor object's methods and data members.
* The Gradle Build Script
#+BEGIN_SRC java :tangle build.gradle :exports none
repositories {
    mavenCentral()
}

apply plugin: "java"

sourceSets {
    main.java.srcDir "src"
}

jar {
    manifest.attributes "Main-Class": "com.monitorobject.Test"
}

#+END_SRC
* Source Code
The java source code files can be found here.
** Message.java

#+BEGIN_SRC java :tangle src/com/monitorobject/Message.java :mkdirp yes :noweb yes
package com.monitorobject;

public class Message {
  public String id;
 
  /**
   ,* This is a constructor
   ,*/
  public Message(String id) {
    this.id = id;
  }
}
#+END_SRC

** MessageQueue.java

#+BEGIN_SRC java :tangle src/com/monitorobject/MessageQueue.java :mkdirp yes :noweb yes
package com.monitorobject;

import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.List;
import java.util.ArrayList;
import java.lang.InterruptedException;

public class MessageQueue {

  <<internal-state>>
  
  /**
   ,* Constructor function
   ,*/
  public MessageQueue(int size) {
    // init the max size
    max_messages = size;
    // init the count
    count = 0;
    // init the queue
    messageQueue = new ArrayList<Message>();

    // init the lock and conditions
    lock = new ReentrantLock();
    notFull = lock.newCondition();
    notEmpty = lock.newCondition();
  }

  <<interface-methods>>

  <<implementation-methods>>
}
#+END_SRC

** Main function

#+BEGIN_SRC java :tangle src/com/monitorobject/Test.java :mkdirp yes
package com.monitorobject;

import java.util.Random;
import java.util.UUID;


public class Test {
  public static void main(String[] args) {

    MessageQueue queue = new MessageQueue(1);

    Producer producer = new Producer(queue);
    Consumer consumer1 = new Consumer(queue);

    new Thread(consumer1).start();
    try {
      Thread.sleep(5000);
    } catch (InterruptedException e) {

    }
    new Thread(producer).start();
  }
}


class Producer implements Runnable {

  private MessageQueue queue;

  final Random random;
  
  Producer(MessageQueue queue) {
    this.queue = queue;
    random = new Random();
  }

  @Override
  public void run() {
    while (true) {
      try {
        String id = UUID.randomUUID().toString();
        Message message = new Message(id);
        queue.put(message);
        System.out.println("PUT - " + message.id);
        Thread.sleep(3000);
      } catch (InterruptedException e) {
      }
      
    }
    
  }

}

class Consumer implements Runnable {

  private MessageQueue queue;

  Consumer(MessageQueue queue) {
    this.queue = queue;
  }

  @Override
  public void run() {
    while (true) {
      try {
        Message message = queue.get();
        System.out.println("GET - " + message.id);
        Thread.sleep(100);
      } catch (InterruptedException e) {
      }
    }
  }
}

#+END_SRC

* How to run
Press =C-c C-c= on the code block below.

#+BEGIN_SRC elisp :exports none
;; tangle the source code
(org-babel-tangle)
;; export to pdf
(org-latex-export-to-pdf)
;; build
(shell-command-to-string "gradle jar")
#+END_SRC

#+RESULTS:
: :compileJava UP-TO-DATE
: :processResources UP-TO-DATE
: :classes UP-TO-DATE
: :jar UP-TO-DATE
: 
: BUILD SUCCESSFUL
: 
: Total time: 3.167 secs
